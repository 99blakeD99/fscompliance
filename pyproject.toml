[tool.poetry]
name = "fscompliance"
version = "0.1.0"
description = "Open-source MCP service for financial regulatory compliance"
authors = ["FSCompliance Project <dev@fscompliance.org>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/99blakeD99/fscompliance"
repository = "https://github.com/99blakeD99/fscompliance"
keywords = ["mcp", "compliance", "financial-services", "regulatory", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.0"
pydantic-settings = "^2.0"
fastapi = "^0.115.0"
uvicorn = "^0.24.0"
httpx = "^0.27.0"
sqlalchemy = "^2.0"
alembic = "^1.12.0"
python-multipart = "^0.0.9"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
transformers = "^4.35.0"
torch = "^2.1.0"
sentence-transformers = "^2.2.2"
networkx = "^3.2"
aiofiles = "^23.2.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.2"
typer = "^0.12.4"
rich = "^13.7.0"
mcp = {extras = ["cli"], version = "^1.4.0"}
lightrag-hku = {extras = ["api"], version = "^0.1.0"}
nano-vectordb = "^0.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.9.0"
ruff = "^0.1.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"
httpx = "^0.27.0"
pytest-mock = "^3.12.0"

[tool.poetry.scripts]
fscompliance = "fscompliance.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fscompliance"]
omit = ["tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]